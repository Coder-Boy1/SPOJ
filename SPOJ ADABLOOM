// This problem can be solved if know the maximum matching of the given graph.
// But we cannot divide it in left and right parts directly by considering n/2 nodes on left and n/2 on right.
// So, What we can do is Divide every elemenent in two parts. One its incoming part and one its out going part.
// Take all incoming nodes in left part . and all outgoing nodes in right part.
// for edge (u,v) draw edge from out(v) to in(u) ..... and out(u) to in(v)
// Find maximum matching ... the answer half of that.
// Because for each edge (u,v) of original graph we will get 2 matching edge.


#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long
#define int long long
 
#define N 100005
 
//1 indexed Hopcroft-Karp Matching in O(E sqrtV)



struct Hopcroft_Karp
{
        static const int inf = 1e9;
 
        int n;
        vector<int> matchL, matchR, dist;
        vector<vector<int> > g;
 
        Hopcroft_Karp(int n) :
                n(n), matchL(n+1), matchR(n+1), dist(n+1), g(n+1) {}
 
        void addEdge(int u, int v)
        {
                g[u].push_back(v);
        }
 
        bool bfs()
        {
                queue<int> q;
                for(int u=1;u<=n;u++)
                {
                        if(!matchL[u])
                        {
                                dist[u]=0;
                                q.push(u);
                        }
                        else
                                dist[u]=inf;
                }
                dist[0]=inf;
 
                while(!q.empty())
                {
                        int u=q.front();
                        q.pop();
                        for(auto v:g[u])
                        {
                                if(dist[matchR[v]] == inf)
                                {
                                        dist[matchR[v]] = dist[u] + 1;
                                        q.push(matchR[v]);
                                }
                        }
                }
 
                return (dist[0]!=inf);
        }
 
        bool dfs(int u)
        {
                if(!u)
                        return true;
                for(auto v:g[u])
                {
                        if(dist[matchR[v]] == dist[u]+1 &&dfs(matchR[v]))
                        {
                                matchL[u]=v;
                                matchR[v]=u;
                                return true;
                        }
                }
                dist[u]=inf;
                return false;
        }
 
        int max_matching()
        {
                int matching=0;
                while(bfs())
                {
                        for(int u=1;u<=n;u++)
                        {
                                if(!matchL[u])
                                        if(dfs(u))
                                                matching++;
                        }
                }
                return matching;
        }
};
 
int32_t main()
{
        int t;
        cin>>t;
 
        while(t--)
        {
                int n;
                cin>>n;
                vector < unsigned long long > a(n+5);
                for(int i=1;i<=n;i++)
                {
                        cin>>a[i];
                }
                Hopcroft_Karp me(n+100);
                for(int i=1;i<=n;i++)
                {
                        for(int j=1;j<=n;j++)
                        {
                                int l=a[i], m=a[i]^a[j], r=a[j];
                                if(l<m && m<r && l<r)
                                {
                                        me.addEdge(i, j);
                                        me.addEdge(j, i);
                                }     
                        }       
                }
 
                cout<<me.max_matching()/2<<endl;
        }
 
 
        return 0;
} 
